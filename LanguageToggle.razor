@inject IJSRuntime JSRuntime
@using Radzen.Blazor

<div class="language-toggle-container">
    <button @onclick="ToggleLanguage" class="btn btn-sm btn-outline-primary" title="@TitleText">
        <RadzenIcon Icon="@(UseTraditional ? "sports_bar" : "local_cafe")" Style="margin-right: 0.5em;" /> @(UseTraditional ? "Traditional" : "Modern")
    </button>
</div>

@code {
    [Parameter]
    public bool UseTraditional { get; set; } = false;

    [Parameter]
    public EventCallback<bool> UseTraditionalChanged { get; set; }

    private string TitleText => UseTraditional ? "Switch to Modern Language" : "Switch to Traditional Language";

    protected override async Task OnInitializedAsync() // Changed to OnInitializedAsync
    {
        // It's often better for the parent component (About.razor) to pass the initial UseTraditional value
        // if it's also loaded from localStorage there.
        // However, if this component is solely responsible for its initial load:
        var langPref = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "language"); // Use "language" key
        if (langPref != null && (langPref == "traditional") != UseTraditional)
        {
            UseTraditional = langPref == "traditional";
            await UseTraditionalChanged.InvokeAsync(UseTraditional); // Notify parent of initial state
            // StateHasChanged(); // If parent re-renders this component, this might not be needed.
        }
    }

    private async Task ToggleLanguage()
    {
        UseTraditional = !UseTraditional;
        await UseTraditionalChanged.InvokeAsync(UseTraditional);

        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "language", // Use "language" key
                                         UseTraditional ? "traditional" : "modern");
    }
}
